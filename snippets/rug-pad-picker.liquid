{% comment %}
  Rug Pad Picker Snippet
  This snippet adds a radio button picker for selecting rug pads, populated from the product's metafield.
{% endcomment %}
<div class="product__accordion accordion quick-add-hidden rug-pad-accordion container-rug-pad">

  <summary>
    <div class="summary__title pad-title">
      {% render 'icon-accordion'
        , icon: block.settings.icon %}
      <h2 class="h4 accordion__title inline-richtext header-picker" id="rugPadSummaryTitle">
        Rug pad
      </h2>
      <span class="tooltip" title="Machine serging">
        {% render 'info-icon' %}
        <span class="tooltip-text content-start">
          <p>The STARK Hold Rug Pad is our standard rug pad we recommend for all spaces.</p>
        </span>
      </span>
      <span id="value-of-type"></span>
    </div>
  </summary>
  <div class="rug-pad-error rug-pad-error-hide" id="rug-pad-error">Rug pad field is required</div>
  <input
    type="hidden"
    name="properties[Rug Pad]"
    form="{{product_form_id}}">
  <input
    type="hidden"
    name="properties[_padhandler]"
    form="{{product_form_id}}">
  <div class="accordion__content rte rug-pads-container">
    <div class="rug-pad-picker">
      {% if shop.metaobjects.rug_pad.values %}
        {% assign rug_pads = shop.metaobjects.rug_pad.values | sort: "updated_at" | reverse %}
        <div class="rug-pad-options">
          {% for rug_pad in rug_pads %}
            <label class="rug-pad-option" data-rug-pad-name="{{ rug_pad.type.value }}">
              <input
                type="radio"
                value="{{ rug_pad.type.value | handleize }}"
                class="rug-pad-radio"
                form="{{product_form_id}}">
              <span class="rug-pad-label">{{ rug_pad.type.value }}</span>
              <div
                class="rug-pad-price"
                data-price-value="{{ rug_pad.price.value }}"
                data-calculated-price=0>$ {{ rug_pad.price.value }}</div>
            </label>
          {% endfor %}
        </div>
      {% else %}
        <p class="center">No rug pads available</p>
      {% endif %}
    </div>
  </div>

</div>


<style>
  /* Rug Pad Picker Styles */

  .pad-title {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    gap: 4px;
  }


  .header-picker {
    font-size: 16px !important;
    font-weight: 700 !important;
    line-height: 1.5rem;
  }

  #value-of-type {
    font-weight: 200 !important;
  }

  .rug-pads-container {
    margin-top: 0.8rem;
  }
  /* Rug Pad Options Container */
  .rug-pad-options {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 10px;
  }

  /* Individual Rug Pad Option Styling */
  .rug-pad-option {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #fff;
    cursor: pointer;
    width: 150px;
  }

  /* Active Option Styling - Black Border */
  .rug-pad-option.active {
    border: 2px solid black;
  }

  /* Hide radio buttons */
  .rug-pad-radio {
    display: none;
  }

  /* Label and Price Styling */
  .rug-pad-label {
    font-size: 12px;
    /* Make type text smaller */
    font-weight: bold;
    text-align: center;
  }

  .rug-pad-accordion {
    border-bottom: none !important;
    margin-top: 0;
  }

  .rug-pad-missing {
    color: red;
  }
  .rug-pad-error {
    margin-left: 30px;
    font-size: 1.4rem;
    color: red;
  }
  .rug-pad-error-hide {
    display: none;
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', async function () {
    const rugPadRadios = document.querySelectorAll('.rug-pad-radio');
    const value = document.getElementById('value-of-type');
    const rugPadInput = document.querySelector('input[name="properties[Rug Pad]"]'); // Hidden input for Rug Pad
    const rugPadHandler = document.querySelector('input[name="properties[_padhandler]"]'); // Hidden input for Rug Pad handler
    const rugPadSummary = document.getElementById('rugPadSummaryTitle');
    var currency = "{{shop.currency}}"; // get the currency
    var currencySymbol = "{{ 25 | money | slice: 0, 1 }}" // Reference to price item
    let lastSelectedRadio = null; // Track the last selected radio
    const { configs : pricesConfigs , isError }  = await PricingConfigs.getConfigs();
    if(!isError){
    rugPadRadios.forEach(function(radio) {      
        radio.addEventListener('click', function(event) {
             
            const shapePickerError = document.getElementById('shape-picker-error');

                // Check if the error element does not have the required class
                if (!shapePickerError.classList.contains('shape-picker-error-hide')) {
                    return; // Exit the event handler early
                }


            const priceItem = document.querySelector('.price-item');
            const selectedOption = this.closest('.rug-pad-option');
            const selectedRugPadName = selectedOption.dataset.rugPadName;
            const selectedRugPadHandler = this.value;
            const prevPrice = parseFloat(priceItem.getAttribute('data-dimension-modified-price')) || 0;
            // Current rug pad price calculated using rug area
            const dataRugPadPrice = parseFloat(priceItem.getAttribute('data-rug-pad-price')) || 0;
            // Current rug protection price calculated using rug area
            const dataRugProtectionPrice = parseFloat(priceItem.getAttribute('data-rug-protection-price')) || 0;
            console.log(`data rug pad price is ${dataRugPadPrice}`);
            console.log(`data rug protection price is ${dataRugProtectionPrice}`);
            document.getElementById('rug-pad-error').classList.add('rug-pad-error-hide');

            // Get the modified price from the data-modified-price attribute
            const existingRugPadPrice = parseFloat(selectedOption.querySelector('.rug-pad-price').getAttribute('data-calculated-price')) || 0;

            if (lastSelectedRadio === this) {
                // Deselecting the option
                this.checked = false; // Uncheck the radio
                selectedOption.classList.remove('active'); // Remove active class
                value.textContent = ''; // Reset the title
                rugPadInput.value = null; // Clear hidden input value
                rugPadHandler.value = "";
                lastSelectedRadio = null; // Clear last selected radio
                priceItem.setAttribute('data-rug-pad-price', 0);
                updatePriceItem(prevPrice + dataRugProtectionPrice); // Reset price item when no selection
            } else {
                // Update active class for the new selection
                document.querySelectorAll('.rug-pad-option').forEach(function(option) {
                    option.classList.remove('active');
                });
                // rugPadSummary.classList.remove('rug-pad-missing');

                selectedOption.classList.add('active'); // Add active class
                value.textContent = `: ${selectedRugPadName}`; // Update title
                rugPadInput.value = selectedRugPadName;
                rugPadHandler.value = selectedRugPadHandler; // Set the hidden input value to the selected rug pad
                lastSelectedRadio = this; // Store the currently selected radio

                // Update the price item with the total price
                const totalPrice = prevPrice + dataRugProtectionPrice + existingRugPadPrice;
                priceItem.setAttribute('data-rug-pad-price', existingRugPadPrice.toFixed(2));
                updatePriceItem(totalPrice); // Update the price item
            }
        });
  });
      }

    // Function to update the price item with formatted price
    function updatePriceItem(totalPrice) {
      const roundedPrice = Math.round(totalPrice);
      const priceItem = document.querySelector('.price-item');
        if (priceItem) {
           const formattedPrice =new Intl.NumberFormat('en-US', {
               style: 'decimal',
               minimumFractionDigits: 2,
               maximumFractionDigits: 2
              }).format(roundedPrice);
            priceItem.innerHTML = `${currencySymbol}${formattedPrice}`;
            priceItem.setAttribute('data-modified-price', totalPrice); // Set modified price attribute
        }
    }
  });
</script>