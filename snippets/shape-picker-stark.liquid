{% comment %}
  Shape Picker Snippet
  This snippet creates a shape picker using pills and displays relevant input fields based on the selected shape.
{% endcomment %}
<script src="{{ 'get-price-from-stark.js' | asset_url }}" defer="defer"></script>
{% assign shapes = 'Rectangular,Round' | split: ',' %}
<div class="option-block">
  <input type="hidden" id="selected-variant-id" value="" >
  <h5 class="picker-header">Shapes</h5>
  <div class="shape-picker" data-area="0">
    {% for shape in shapes %}
      {% assign is_disabled = false %}
      {% if shape == 'Rectangular' %}
        {% assign is_checked = true %}
      {% elsif shape == 'Round' %}
        {% assign is_checked = false %}
      {% endif %}
      <label class="shape-pill{% if is_disabled %} disabled{% endif %} {% if is_checked %}checked{% endif %}">
        <input
          type="radio"
          name="shape"
          value="{{ shape }}"
          class="shape-input"
          {% if is_disabled %} disabled{% endif %}
          {% if is_checked %} checked{% endif %}
          form="{{product_form_id}}"
        >
        <div class="shape-pill-content">
        {% if shape == 'Round' %}
          {% render 'icon-round' %}
        {% elsif shape == 'Rectangular' %}
          {% render 'icon-rectangle' %}
        {% endif %}
        <div class="shape-pill-label">
        {{ shape }}
        </div>
        </div>
      </label>
    {% endfor %}
  </div>

  <div class="shape-details-container">
 
    <div id="RoundDetails" class="shape-details" style="display: none;">
      <label for="DiameterSelect" class="form-label">DIAMETER</label>
      <div class="flex-row">
        <div class="dimension-input">
          <div class="select-wrapper">
          <select id="DiameterSelect" name="diameter" class="form-select">
          </select>
           <div class="custom-arrow">
           {% render 'double-arrow' %}
          </div>
          </div>
        </div>
        <div class="dimension-input">
          <div class="select-wrapper">
          <select id="DiameterInchSelect" name="diameter-inch" class="form-select">            
          </select>
          <div class="custom-arrow">
           {% render 'double-arrow' %}
          </div>
          </div>
        </div>
      </div>
    </div>


 
    <div id="RectangularDetails" class="shape-details" style="display: block;">

      <label for="WidthSelect" class="form-label">WIDTH</label>
      <div class="flex-row">
        <div class="dimension-input">
          <div class="select-wrapper">
          <select id="WidthSelect" name="width" class="form-select">
          </select>
           <div class="custom-arrow">
           {% render 'double-arrow' %}
          </div>
          </div>
        </div>
        <div class="dimension-input">
          <div class="select-wrapper">
          <select id="WidthInchSelect" name="width-inch" class="form-select">
          </select>
           <div class="custom-arrow">
           {% render 'double-arrow' %}
          </div>
          </div>
        </div>
      </div>
      <label for="LengthSelect" class="form-label">LENGTH</label>
      <div class="flex-row">
        <div class="dimension-input">
          <div class="select-wrapper">
          <select id="LengthSelect" name="length" class="form-select">
          </select>
           <div class="custom-arrow">
           {% render 'double-arrow' %}
          </div>
          </div>
        </div>
        <div class="dimension-input">
          <div class="select-wrapper">
          <select id="LengthInchSelect" name="length-inch" class="form-select">
            {% for i in (0..11) %}
              <option value="{{ i }}">{{ i }} inch</option>
            {% endfor %}
          </select>
           <div class="custom-arrow">
           {% render 'double-arrow' %}
          </div>
          </div>
        </div>
      </div>

    </div>
 
</div>

<a href="#" id="openMaxMinInfo">Min/max size info</a>
  <div class="shape-picker-error shape-picker-error-hide" id="shape-picker-error">Minimum of 12 square feet required</div>
</div>

<dialog class="max-min-dialog" id="max-min-dialog">
    <div class="max-min-modal-content">
        <div class="max-min-modal-header">
            <span class="close-max-min-modal">&times</span>
            <h2 align="center">MAX MIN SIZE INFO</h2>
        </div>
            <div class="max-min-modal-body">
              <div class="rectangle-info flex-container">
                <!-- First container for Min Size -->
                <div class="min-container">
                    <div class="dimension-container">
                    <div class="rectangle min-rectangle">
                        <span class="length-label-vertical">&#8592; <span id="min-rect-length-value">8ft</span> &#8594;</span>
                        <span class="width-label-horizontal">&#8592; <span id="min-rect-width-value"></span>&#8594;</span>
                    </div>
                    </div>
                    <div class="size-desc">
                        <h4>Min Size</h4>
                        <div class="min-desc">
                          <h5 class="desc-label">MIN WIDTH</h5>
                          <h6 id="min-width-value">2 FEET</h6>
                        </div>
                         <div class="max-desc">
                          <h5 class="desc-label">MIN LENGTH</h5>
                          <h6 id="min-length-value">5 FEET</h6>
                        </div>
                    </div>
                </div>
                
                <!-- Second container for Max Size -->
                <div class="max-container">
                  <div class="dimension-container">
                    <div class="rectangle max-rectangle">
                        <span class="length-label-vertical">&#8592; <span id="max-rect-length-value">5ft</span> &#8594;</span>
                        <span class="width-label-horizontal">&#8592; <span id="max-rect-width-value">8ft</span>&#8594;</span>
                    </div>
                    </div>
                     <div class="size-desc">
                        <h4>Max Size</h4>
                        <div class="max-desc">
                          <h5 id="desc-label">MAX WIDTH</h5>
                          <h6 id="max-width-value">2 FEET</h6>
                        </div>
                         <div class="max-desc">
                          <h5 class="desc-label">MAX LENGTH</h5>
                          <h6 id="max-length-value">5 FEET</h6>
                        </div>
                    </div>
                </div>
            </div>
            <div class="round-info flex-container">
               <div class="min-container">
                    <div class="dimension-container">
                    <div class="round min-round">
                        <span class="diameter-label-vertical">&#8592; <span id="min-round-diameter-value">8ft</span> &#8594;</span>
                    </div>
                    </div>
                    <div class="size-desc">
                        <h4>Min Size</h4>
                        <div class="min-desc">
                          <h5 class="desc-label">MIN DIAMETER</h5>
                          <h6 id="min-diameter-value">2 FEET</h6>
                        </div>
                    </div>
                </div>
                <div class="max-container">
                    <div class="dimension-container">
                    <div class="round max-round">
                        <span class="diameter-label-vertical">&#8592; <span id="max-round-diameter-value">8ft</span> &#8594;</span>
                    </div>
                    </div>
                    <div class="size-desc">
                        <h4>Max Size</h4>
                        <div class="min-desc">
                          <h5 class="desc-label">MAX DIAMETER</h5>
                          <h6 id="max-diameter-value">2 FEET</h6>
                        </div>
                    </div>
                </div>
            </div>
           </div>
      </div>
</dialog>


<script src="{{ 'currency-divisor.js' | asset_url }}" defer></script>
<script>  
  window.rugPayload = {
  SKU: null,
  isPristine: false,
  isPadding: false,
  widthInches: 0,
  lengthInches: 0,
  BindingMethod: "Serging",
};

  document.addEventListener('DOMContentLoaded', async function () {
    var variantMetafields = {};
    var currency = "{{shop.currency}}"; // get the currency
    var currencySymbol = "{{ 25 | money | slice: 0, 1 }}" // get the symbol
    var divisor = currencyDivisors[currency] || 100; // calculating for per divisor
    var selectedVariantPrice;
    var modal = document.getElementById("max-min-dialog");
    var btn = document.getElementById("openMaxMinInfo");
    var closeBtn = document.getElementsByClassName("close-max-min-modal")[0];
    var selectedVariantSKU;
    
    var minRectLengthLabel = document.getElementById("min-rect-length-value");
    var minRectLengthValue = document.getElementById("min-length-value")

  
    var minRectWidthLabel = document.getElementById("min-rect-width-value");
    var minRectWidthValue = document.getElementById("min-width-value");

    var minRoundDiameterLabel = document.getElementById("min-round-diameter-value");
    var minRoundDiameterValue = document.getElementById("min-diameter-value");
    
    
    var maxRectLengthLabel = document.getElementById("max-rect-length-value");
    var maxRectLengthValue = document.getElementById("max-length-value");

    var maxRectWidthLabel = document.getElementById("max-rect-width-value");
    var maxRectWidthValue = document.getElementById("max-width-value");
    
    var maxRoundDiameterLabel = document.getElementById("max-round-diameter-value");
    var maxRoundDiameterValue = document.getElementById("max-diameter-value");
    
    let dimensionChangeFlag = false; // for showing error only when the dimension is changed !

    const shapePicker = document.querySelector('.shape-picker');
    

    rugPayload.SKU = selectedVariantSKU,
        
    
    btn.onclick = function(event) {
        event.preventDefault();
        //modal.style.display = "flex";
        modal.showModal();
    }

    closeBtn.onclick = function() {
        console.log('Closing modal');
        //modal.style.display = "none";
        modal.close();
    }

    window.onclick = function(event) {
        if (event.target == modal) {
            modal.close();
        }
    }


    {% for variant in product.variants %}
      variantMetafields["{{ variant.id }}"] = {
      price:{{ variant.price }},
      max_diameter: {{ variant.metafields.fabric.max_diameter.value | default: '0.0' }},
      max_length: {{ variant.metafields.fabric.max_length.value | default: '0.0' }},
      max_width: {{ variant.metafields.fabric.max_width.value | default: '0.0' }},
      sku: "{{ variant.sku }}"
      };
      {% endfor %}

    const unit = '{{ product.metafields.custom.dimension_unit | default: "ft" }}';

    const diameterSelect = document.getElementById('DiameterSelect');
    const diameterInchSelect = document.getElementById('DiameterInchSelect');
    const lengthSelect = document.getElementById('LengthSelect');
    const lengthInchSelect = document.getElementById('LengthInchSelect');
    const widthSelect = document.getElementById('WidthSelect');
    const widthInchSelect = document.getElementById('WidthInchSelect');
    const selectedVariantIdInput = document.getElementById('selected-variant-id');

    // Function to extract the 'variant' parameter from the URL
    function getVariantIdFromUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      return urlParams.get('variant');
    }
 
    // Function to update the options in a select element
   function updateSelectOptions(selectElement, maxValue) {
    console.log(maxValue);
  const defaults = {
    LengthSelect: 3,
    WidthSelect: 4,
    DiameterSelect: 3,
  };

   const inchElementIds = {
    LengthSelect: 'LengthInchSelect',
    WidthSelect: 'WidthInchSelect',
    DiameterSelect: 'DiameterInchSelect',
  };
  
  const unit = "feet"; // Assuming unit is "feet"
  const minimumValue = defaults[selectElement.id] || 0;
  
  selectElement.innerHTML = ''; // Clear existing options

  if (maxValue === 0) {
    // If maxValue is 0, show only one option with value 0
    const option = document.createElement('option');
    option.value = 0;
    option.textContent = `0 ${unit}`;
    selectElement.appendChild(option);
    return;
  }

    // Handle width and diameter with inches
    const { maxFeet, maxInch } = convertToFeetAndInches(maxValue);

    // Populate feet options
    for (let i = 1; i <= maxFeet; i++) {
      const option = document.createElement('option');
      option.value = i;
      option.textContent = `${i} ${unit}`;
      if (i === minimumValue) {
        option.selected = true;
      }
      selectElement.appendChild(option);
    }

    // Add an event listener to dynamically update the inch options
    selectElement.addEventListener('change', function () {
      const selectedFeet = parseInt(this.value, 10);
      const inchSelectId =  inchElementIds[selectElement.id] 
      const inchSelect = document.getElementById(inchSelectId);
      
      if (inchSelect) {
        inchSelect.innerHTML = ''; // Clear existing inch options

        // Determine the max inches for the selected feet
        const maxInchesForSelectedFeet = selectedFeet === maxFeet ? maxInch : 11;
        // Populate inch options
        for (let i = 0; i <= maxInchesForSelectedFeet; i++) {
          const inchOption = document.createElement('option');
          inchOption.value = i;
          inchOption.textContent = `${i} inch`;
          inchSelect.appendChild(inchOption);
        }
      }
    });

    // Trigger the change event initially to populate inches
    selectElement.dispatchEvent(new Event('change'));
}



    // Function to update shape details based on the selected variant
    function updateShapeDetails() {
      const selectedVariantId = selectedVariantIdInput.value;
      const selectedVariant = variantMetafields[selectedVariantId] || {};
      selectedVariantSKU = variantMetafields[selectedVariantId].sku;
      selectedVariantPrice = selectedVariant.price;
      
      diameterInchSelect.selectedIndex = 0;
      lengthInchSelect.selectedIndex = 0;
      widthInchSelect.selectedIndex = 0;

       minRectLengthLabel.innerHTML = "6'"
       minRectLengthValue.innerHTML = "6 feet"

       minRoundDiameterLabel.innerHTML = "3'"
       minRoundDiameterValue.innerHTML = "3 feet"

      const {maxFeet:maxDiameterFeet , maxInch:maxDiameterInch} = convertToFeetAndInches(selectedVariant.max_diameter)

       maxRoundDiameterLabel.innerHTML = `${maxDiameterFeet}' ${maxDiameterInch > 0 ? `${maxDiameterInch}"` : ""}`
       maxRoundDiameterValue.innerHTML = `${maxDiameterFeet} feet ${maxDiameterInch > 0 ? ` ${maxDiameterInch} inch` : ""}`

       const {maxFeet:maxLengthFeet, maxInch:maxLengthInch}=convertToFeetAndInches(selectedVariant.max_length);
       maxRectLengthLabel.innerHTML = `${maxLengthFeet}' ${maxLengthInch > 0 ? `${maxLengthInch}"` : ""}`
       maxRectLengthValue.innerHTML = `${maxLengthFeet} feet ${maxLengthInch > 0 ? `${maxLengthInch}"` : ""}`
    
       minRectWidthLabel.innerHTML = "2'"
       minRectWidthValue.innerHTML = "2 feet"

      const {maxFeet:maxWidthFeet , maxInch:maxWidthInch} = convertToFeetAndInches(selectedVariant.max_width)

      maxRectWidthLabel.innerHTML = `${maxWidthFeet}' ${maxWidthInch > 0 ? `${maxWidthInch}"` : ""}`;
      maxRectWidthValue.innerHTML = `${maxWidthFeet} feet${maxWidthInch > 0 ? ` ${maxWidthInch} inch` : ""}`;


        if(selectedVariant.max_diameter){
        diameterSelect.disabled = false;
        diameterInchSelect.disabled = false;  
        updateSelectOptions(diameterSelect, selectedVariant.max_diameter);
        }else {
        diameterSelect.disabled = true;
        diameterInchSelect.disabled = true;  
        updateSelectOptions(diameterSelect, 0);
        }
        if(selectedVariant.max_length){
        lengthSelect.disabled = false;
        lengthInchSelect.disabled = false;  
        updateSelectOptions(lengthSelect, selectedVariant.max_length)
        }else{
        lengthSelect.disabled = true;
        lengthInchSelect.disabled = true;  
        updateSelectOptions(lengthSelect, 0)
        }
        if(selectedVariant.max_width){
        widthSelect.disabled = false;
        widthInchSelect.disabled = false;   
        updateSelectOptions(widthSelect, selectedVariant.max_width)
        }else {
        widthSelect.disabled = true;
        widthInchSelect.disabled = true;  
          updateSelectOptions(widthSelect,0)
        };

    setTimeout(() => {
    console.log("timeout call")
      updatePrice();
  }, 0);
      
    }

    // Set the selectedVariantId based on the URL or default to the first variant
    const variantIdFromUrl = getVariantIdFromUrl();
    if (variantIdFromUrl && variantMetafields[variantIdFromUrl]) {
      selectedVariantIdInput.value = variantIdFromUrl;
    } else {
      // Set to the first key in variantMetafields
      selectedVariantIdInput.value = Object.keys(variantMetafields)[0];
    }

    // Call updateShapeDetails to set the initial shape details
    updateShapeDetails();

    // Function to update price based on selected dimensions
    async function updatePrice() {
      console.log("called update price")
      let area = 0;
      const shape = document.querySelector('input[name="shape"]:checked')?.value;
      const priceItem = document.querySelector('.price-item');

      priceItem.innerHTML = "Calculating Price...";
      
      rugPayload.SKU = selectedVariantSKU;

      
      if (shape === 'Round') {
        const diameter = parseFloat(diameterSelect.value);
        const diameterInches = parseFloat(diameterInchSelect.value);

        const totalDiameter = diameter * 12 + diameterInches;
       
        if (totalDiameter) {
          area = totalDiameter * totalDiameter;
        }
        rugPayload.LengthInches = totalDiameter;
        rugPayload.widthInches = totalDiameter;
        const {ok,totalCarpetCharge} = await PriceStore.getPrice(rugPayload.SKU,rugPayload.widthInches,rugPayload.LengthInches,rugPayload.isPristine , rugPayload.isPadding)
        const {ok:optionOk,totalPadding,totalPristine} = await PriceStore.getPrice(rugPayload.SKU,rugPayload.widthInches,rugPayload.LengthInches,true , true)
        if(ok && optionOk){
        calculatePrice( totalCarpetCharge,totalPadding , totalPristine ,false);
  }else{
    priceItem.innerHTML = "Price Not Available";
  }
        shapePicker.dataset.area = area; // set for add to cart action to know if the area is valid one!

      } else if (shape === 'Rectangular') {
        const length = parseFloat(lengthSelect.value);
        const lengthInches = parseFloat(lengthInchSelect.value);
        const width = parseFloat(widthSelect.value);
        const widthInches = parseFloat(widthInchSelect.value);


        const totalLength = length * 12  + lengthInches;
        const totalWidth = width * 12 + widthInches;

        rugPayload.LengthInches = totalLength;
        rugPayload.widthInches = totalWidth;
        const {ok,totalCarpetCharge} = await PriceStore.getPrice(rugPayload.SKU,rugPayload.widthInches,rugPayload.LengthInches,rugPayload.isPristine , rugPayload.isPadding)
        const {ok:optionOk,totalPadding,totalPristine} = await PriceStore.getPrice(rugPayload.SKU,rugPayload.widthInches,rugPayload.LengthInches,true , true)

        if (totalLength && totalWidth) {
          area = (totalLength / 12 ) * (totalWidth / 12 );
        }
        if(ok && optionOk){
        if(area >= 12){
          shapePicker.dataset.area = area;
          calculatePrice( totalCarpetCharge,totalPadding , totalPristine ,false);          
        }else{
          calculatePrice(totalCarpetCharge,totalPadding , totalPristine,true);
          shapePicker.dataset.area = 0; // set for add to cart action to know if the area is valid one!
          
          priceItem.innerHTML = "Not available for order"
          
       document.getElementById('shape-picker-error').classList.remove('shape-picker-error-hide');
            
        }
  }else{
    priceItem.innerHTML = "Price Not Available";
  }

      }
      function calculatePrice(totalCharge , paddingCharge , protectionCharge , defaultPrice = false){  
      document.getElementById('shape-picker-error').classList.add('shape-picker-error-hide');
      const rugPadRadios = document.querySelectorAll('.rug-pad-radio');
      const rugProtectionRadios = document.querySelectorAll('.rug-protection-radio');
      const priceItem = document.querySelector('.price-item');

      priceItem.style.cssText = "font-weight: 500; font-size:2rem;" 

      let selectedRugPadPrice = 0;
      let selectedRugProtectionPrice = 0;
      
      if(rugPadRadios && paddingCharge){
     // Ensure area is at least 4
      rugPadRadios.forEach(function(radio) {
         const rugType = radio.closest('.rug-pad-option').querySelector(".rug-pad-radio").value;
        if(rugType !== "none"){
         const priceElement = radio.closest('.rug-pad-option').querySelector('.rug-pad-price');
        
        const newPrice = parseFloat(paddingCharge);
        const formattedNewPrice =new Intl.NumberFormat('en-US', {
    style: 'decimal',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
}).format(paddingCharge);
         // Calculate new price based on area
        if(defaultPrice){
         priceElement.textContent = `$${formattedNewPrice} / sqft`;
            }else{
    priceElement.textContent = `$${formattedNewPrice}`;
   } // Update displayed price
        priceElement.setAttribute('data-calculated-price', paddingCharge);
         if (radio.checked) {
            selectedRugPadPrice = newPrice;
        }
  }
      });
      }

      if(rugProtectionRadios && protectionCharge){
      rugProtectionRadios.forEach(function(radio) {
        const rugType = radio.closest('.rug-protection-option').querySelector(".rug-protection-radio").value;
        if(rugType !== "none"){
        const priceElement = radio.closest('.rug-protection-option').querySelector('.rug-protection-price');
        const newPrice = parseFloat(protectionCharge);
        const formattedNewPrice =new Intl.NumberFormat('en-US', {
    style: 'decimal',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
}).format(newPrice);
        if(defaultPrice){
         priceElement.textContent = `$${formattedNewPrice} / sqft`;
   }else{
    priceElement.textContent = `$${formattedNewPrice}`;
   }
        priceElement.setAttribute('data-calculated-protection-price', newPrice);
         if (radio.checked) {
            selectedRugProtectionPrice = newPrice;
        }
  }
      });
      } 
      
      if (priceItem && !defaultPrice) {// Check type of selectedRugPadPrice
    // Ensure selectedRugPadPrice is a number
   
    const selectedRugPadPriceNum = parseFloat(selectedRugPadPrice) || 0; // Convert to number, default to 0 if NaN
    const selectedRugProtectionPriceNum = parseFloat(selectedRugProtectionPrice) || 0;
    const price = totalCharge;
    // Calculate price and ensure it's a number
    priceItem.setAttribute('data-dimension-modified-price',totalCharge);
    priceItem.setAttribute('data-rug-pad-price', selectedRugPadPriceNum);
    priceItem.setAttribute('data-rug-protection-price', selectedRugProtectionPriceNum);

    priceItem.setAttribute('data-modified-price', price);

    // Format final price with two decimals
    const formattedViewPrice =new Intl.NumberFormat('en-US', {
    style: 'decimal',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
}).format(price);
    const formattedPrice = `${currencySymbol}${formattedViewPrice}`; // Ensure it's formatted correctly
    priceItem.innerHTML = formattedPrice;
      }
  }
    }

    // Shape pill click handler
    document.querySelectorAll('.shape-pill').forEach(function (pill) {
      pill.addEventListener('click', function () {
        dimensionChangeFlag = false;
        document.querySelectorAll('.shape-pill').forEach(function (p) {
          p.classList.remove('checked');
        });

        pill.classList.add('checked');
        document.querySelectorAll('.shape-details').forEach(function (detail) {
          detail.style.display = 'none';
        });

        document.querySelector('.round-info').style.display = "none";
        document.querySelector('.rectangle-info').style.display = "none";

        if (pill.querySelector('input').value === 'Round') {
          document.getElementById('RoundDetails').style.display = 'block';
          document.querySelector('.round-info').style.display = "flex";
        } else if (pill.querySelector('input').value === 'Rectangular') {
          document.getElementById('RectangularDetails').style.display = 'block';
          document.querySelector('.rectangle-info').style.display = "flex";
        }
        diameterInchSelect.selectedIndex = 0;
        console.log("rug-shape")
        updatePrice()
      });
          
    });

    // Listen for changes in the dimension inputs to update the price
    document.querySelectorAll('#DiameterSelect, #DiameterInchSelect, #LengthSelect, #LengthInchSelect, #WidthSelect, #WidthInchSelect').forEach((input) => {
      input.addEventListener('change', (e) => {
      console.log(e);  
      dimensionChangeFlag = true;  
       console.log("rug-dimension")
       updatePrice()
      });
    }); 

    // Listen for changes in the variant selection
    selectedVariantIdInput.addEventListener('change', updateShapeDetails);

    function convertToFeetAndInches(totalInches) {
    if (totalInches < 1) {
        return null;
    }
    const feet = Math.floor(totalInches / 12);
    let inches = totalInches % 12;
    if (inches < 1) {
        inches = 0;
    }
    return {maxFeet : feet , maxInch : inches } ;
}

  });
</script>



<style>

.option-block {
    border: 1px solid #ccc;
    padding: 15px 20px;
    border-radius: 3px;
  }
  .option-block h5 {
    margin-bottom: 15px;
    font-weight: bold;
  }
  .picker-header{
    font-size: 1.7rem;
    font-family: var(--font-body-family);
  }
  .shape-picker {
    display: flex;
    gap: 0.5rem;
  }
  .shape-pill {
    padding: 5px 15px;
    border: 1px solid #ccc;
    border-radius: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-size: 1.2rem;
    font-weight: bold;
  }

  .shape-pill-content {
    display: flex;
    align-items: center;
    gap:0.8rem;
  }
  .shape-pill.checked {
    background-color: #000;
    color: #fff;
    border-color: #000;
  }
  .shape-pill.disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  .shape-input {
    display: none;
  }

  .shape-details {
  margin-top: 15px;
}

.flex-row {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

.dimension-input {
  flex:1;
  display: flex;
  flex-direction: column;
}

.form-label {
  font-weight: bold;
  margin-bottom: 5px;
  display: block;
  font-size:1.3rem;
}

.form-label-sm {
  font-size: 1.1rem;
  font-weight: normal;
  margin-bottom: 3px;
  text-align: center;
}






/* Additional styles to handle padding and appearance */


select { /* Adjust padding to fit your design */
  border: none !important;
  font-size: 16px;
  background: inherit;
  outline:0;
  margin:0 !important;
  color:#000;
  /* Maintain default appearance */
  appearance: none; /* Keeps the native arrow visible */
  box-shadow: none !important;
 background-color: #fbfafa !important;
}

select:focus{
  border:none !important; 
}

/* Additional styles for the select wrapper if needed */
.select-wrapper {
  padding: 5px 20px;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #fbfafa !important;
  border-bottom: 1.2px solid #000;
  box-shadow: 0.5px 0.5px 2px #eeeeee;
}

.select-wrapper::after {
  content: ""; /* Custom double arrow symbols */
  font-size: 12px;
  position: absolute;
  right: 10px; /* Adjust based on your design */
  color: #000; /* Arrow color */
  pointer-events: none; /* Prevent interaction */
}

.custom-arrow {
  position: absolute;
  right: 10px;
  pointer-events: none; /* Prevent interaction */
  display: flex;
  align-items: center;
}

/* Style for SVG if needed */
.custom-arrow svg {
  width: 8px;
  height: 14px;
  fill: #000; /* Set the color of the SVG */
}
 #openMaxMinInfo {
    text-decoration:underline;
    font-size: 1.4rem;
    margin-top: 0.7rem;
    color:#7b7a7a
  }

  .max-min-modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
    background-color: rgb(0,0,0); /* Fallback color */
    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
  }

  .max-min-dialog {
    position: fixed;
    left:0%;
    top: 0%;
    padding: 2.5rem;
    width: 50%;
    height: 90%;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    border: 0px solid black;
    animation-name: animatetop;
    animation-duration: 0.4s
  }

  @media screen and (max-width : 900px) {
    .max-min-dialog {
    padding: 1.5rem;
    width: 100%;
    height: 90%;
    left:0%;
    top: 0%;
  }
  }
  
  /* The Close Button */
  .close-max-min-modal {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }
  
  .close-max-min-modal:hover,
  .close-max-min-modal:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }

  /* Modal Header */
  .max-min-modal-header {
    padding: 2px 16px;
    color: white;
  }
  
  /* Modal Body */
  .max-min-modal-body {
    padding: 2px 16px;
  }
  
  /* Modal Content */
  .max-min-modal-content {
    position: relative;
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    width: 100%;
    margin-bottom: 1.5rem;
  }
  
  /* Add Animation */
  @keyframes animatetop {
    from {top: -300px; opacity: 0}
    to {top: 0; opacity: 1}
  }

  .max-min-modal-option {
    display: flex;
    align-items: center;
    margin-top: 1.5rem;
  }

  .max-min-modal-option-text {
    margin: 1.5rem;
  }


     .flex-container {
        flex-direction: column;
        justify-content: space-between;
        margin-top: 20px;
        gap:30px;
    }

    .dimension-container{
      background-color: #f9f8f8;
      display: flex;
      justify-content: center;
      align-items: center;
      flex: 2;
      padding: 5rem;  
    }
    .min-container, .max-container {
        display: flex;
        justify-content:space-around;
        align-items: center;
        text-align: center;
        gap:3rem;
    } 

    @media screen and (max-width:900px) {
      .min-container, .max-container {
        flex-direction: column;
        justify-content: center;
        align-items: center;
    } 
    }

    .rectangle {
        position: relative;
        border: 2px solid #000;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 10px;
        font-size: 1.4rem;
        border-radius: 0.5rem;
    }

    .length-label-vertical {
        position: absolute;
        left: -45px;
        top: 50%;
        transform: translateY(-50%) rotate(-90deg);
    }

    .width-label-horizontal {
        position: absolute;
        top: -30px;
    }

    .size-desc {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .size-desc h4 {
      font-size: 2.3rem;
      margin: 0;
      margin-bottom: 1.4rem;
    }

    .size-desc h5 {
      font-size: 1.3rem;
      margin: 0;
      text-align: left;
    }

    .size-desc h6{
      font-size: 1.7rem;  
      font-weight: 500;
      margin:0;
      text-align: left;
    }

    .rectangle-info {
      display:flex;
    }

    .min-rectangle {
        background-color: #e0e0e0;
        width: 60px;
        height: 80px;

    }

    .max-rectangle {
        background-color: #e0e0e0;
        width: 100px;
        height: 140px;
    }

    .round-info {
      display: none;
    }
    .round {
        position: relative;
        border: 2px solid #000;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 10px;
        font-size: 1.4rem;
        border-radius: 0.5rem;
    }

    .min-round {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background-color: #e0e0e0;
    }

     .max-round {
      width: 130px;
      height: 130px;
      border-radius: 50%;
      background-color: #e0e0e0;
    }

    .shape-picker-error {
    font-size: 1.1rem;
    color: red;
    text-align: left;
  }

  .shape-picker-error-hide {
    display: none;
  }

</style>
